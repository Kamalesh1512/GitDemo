Interview Questions
                                            Spring Core Interview Questions
Q1. What do you understand by the terms Dependency Inversion Principle (DIP), Dependency Injection (DI) and Inversion of Control (IoC) container?

A1. The differences are very subtle and can be hard to understand. Hence, explained via code samples.

1) Dependency Inversion Principle (DIP):  The idea of DIP is that higher layers of your application should not directly depend on lower layers. DIP is the principle that guides us towards DI pattern. 

2) Dependency Injection (DI): is a design pattern where instead of having your objects create a dependency or asking a factory object to make one for you, you pass the needed dependencies into the constructor or via setters from outside the class. This is achieved by defining the dependencies as interfaces, and then injecting in a concrete class implementing that interface via a constructor (i.e. constructor injection) or a setter method (i.e. setter injection). Dependency Injection is a design pattern that allows us to write loosely coupled code for better maintainability,

3) Inversion of Control (IoC): is a software design principle where the framework controls the program flow. Spring framework, Guice, etc are IoC containers that implement the IoC principle.

Q2. What are you “Inverting” in IoC?

A2. Flow of control is “inverted” by dependency injection because you are effectively delegating dependencies to some external system .

Q3. What are the different implementation patterns of IoC principle?

A3. The two implementation patterns of the IoC design principles are

Dependency Injection (DI) pattern: A class is given its dependencies from outside like Spring IoC or JEE 7+ container. It neither knows, nor cares where the dependencies are coming from.

Service Locator (SL) pattern: A class is still responsible for creating its dependencies. It just uses the service locator to do it.

Q4. When will you favor DI type “Constructor Injection” over “Setter Injection”?

A4. Using constructor injection allows you to hide immutable fields from users of your class. Immutable classes don’t declare setter methods. This also enforces that you have the valid objects at the construction time. It also prompts you to rethink about your design when you have too many constructor parameters.

Q5. When will you favor DI type “Setter Injection” over “Constructor Injection”?

A5. In some scenarios, the constructors may get a lot of parameters, which force you to create a lot of overloaded constructors for every way the object might be created. In these scenarios setter injection can be favored over constructor injection, but having too many constructor parameters may be an indication of a bad design.

Q6. Can you describe the bean life cycle?

A6. A Spring Bean represents a POJO (Plain Old Java Object) performing useful operation(s). All Spring Beans reside within a Spring IoC Container. The Spring Framework hides most of the complex infrastructure and the communication that happens between the Spring Container and the Spring Beans.

Spring Bean life cycle means the construction and destruction of the beans and usually this is in relation to the construction and destruction of the Spring Context. Spring has three ways of calling your code during initialization and shut down.

1. Programmatically, usually called ‘interface callbacks’: Spring calls your bean during the setup and tear down of the Spring Context, and your bean needs to implement InitializingBean or DisposableBean. Spring 3.0 has the Lifecycle interface with start/stop lifecycle control methods. The typical use case for this is to control asynchronous processing.

2. Declarative ‘method callbacks’ on a per bean basis: You use a method callback by adding a method to your bean, which you then reference in your XML config. When Spring reads the config it figures out that there’s a bean of type “A” with a method that it needs to call on startup and another it needs to call on shutdown.

3. Declarative ‘method callbacks’ to all beans.

Initialization:

Step 1: The spring container finds the bean’s definition from the XML file or annotations (like @Configuration) and instantiates the bean.

Step 2: Using the dependency injection, spring populates all of the bean properties as specified in the bean definition.

Step 3: If the bean implements the BeanNameAware interface, the factory calls “setBeanName()” passing the bean’s ID.

Step 4: If the bean implements the BeanFactoryAware interface, the factory calls “setBeanFactory()”, passing an instance of itself.

Step 5: If the bean implements the ApplicationContextFactoryAware interface, the container calls “bean.setApplicationContext(container)”.

Step 6: If there are any BeanPostProcessors associated with the bean, their “postProcessBeforeInitialization()” method will be called.

Step 7a: If the bean implements InitializingBean interface, “bean.afterPropertiesSet()” method will be invoked.

Step 7b: If the bean declares custom init method, the container calls custom init method of that bean

Step 8: If there are any BeanPostProcessors associated with the bean, their “postProcessAfterInitialization()” method will be called.

Step 9: Bean is now ready for use.

shutdown:

Step 1: If the bean implements DisposableBean interface, container calls the “bean.destroy()”.

Step 2: If the bean declares custom destroy method, container calls custom destroy method of bean.

Q7. Does Spring dependency injection happen during compile time or runtime?

A7. Runtime during the creation of an object.

Q8. What is the difference between prototype scope and singleton scope? Which one is the default?

A8. Singleton means single bean instance per IoC container, and prototype means any number of object instances per IoC container. The default scope is “singleton”.

Q9. When will you use singleton scope? When will you use prototype scope?

A9. Singleton scope is used for stateless object use. For example, injectiong a DAO (i.e. Data Access Object) into a service object. DAOs don’t need to maintain conversation state. 

For example:

Prototype is useful when your objects maintain state in a multi-threaded environment. Each thread needs to use its own object and cannot share the single object. For example, you might have a RESTFul web service client making multi-threaded calls to Web services. The REST easy client APIs like RESTEasy uses the Apache Connection manager which is not thread safe and each thread should use its own client. Hence, you need to use the prototype scope.

Q10. What happens if you inject a prototype scoped bean into a singleton scoped bean?

A10. A new prototype scoped bean will be injected into a singleton scoped bean once at runtime, and the same prototype bean will be used by the singleton bean.

Q11. What are the scopes defined in Web Application context?

A11. Following scopes are only valid in the context of a web-aware Spring ApplicationContext

Request Scope is for a single bean definition to the lifecycle of a single HTTP request. In other words each and every HTTP request will have its own instance of a bean created off the back of a single bean definition.

Session Scope is for a single bean definition to the lifecycle of a HTTP Session.

Global Session Scope is for a single bean definition to the lifecycle of a global HTTP Session. Typically only valid when used in a Portlet context.